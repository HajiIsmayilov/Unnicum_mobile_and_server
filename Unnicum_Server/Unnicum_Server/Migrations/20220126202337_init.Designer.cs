// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Unnicum_Server.Data;

#nullable disable

namespace Unnicum_Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220126202337_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Unnicum_Server.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longtitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Unnicum_Server.Models.BlockedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BlockedId")
                        .HasColumnType("int");

                    b.Property<int>("WhoBlockedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockedId");

                    b.HasIndex("WhoBlockedId");

                    b.ToTable("BlockedUsers");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChallengedPostId")
                        .HasColumnType("int");

                    b.Property<int>("ChallengerPostId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Ended")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Started")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ChallengedPostId")
                        .IsUnique();

                    b.HasIndex("ChallengerPostId")
                        .IsUnique();

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("Unnicum_Server.Models.ChallengeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("ChallengeCategories");
                });

            modelBuilder.Entity("Unnicum_Server.Models.ChallengeComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("CommentId")
                        .IsUnique();

                    b.ToTable("ChallengeComment");
                });

            modelBuilder.Entity("Unnicum_Server.Models.ChallengeLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("LikeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("LikeId")
                        .IsUnique();

                    b.ToTable("ChallengeLike");
                });

            modelBuilder.Entity("Unnicum_Server.Models.ChallengeStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("LoserId")
                        .HasColumnType("int");

                    b.Property<int>("WinnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId")
                        .IsUnique();

                    b.HasIndex("LoserId");

                    b.HasIndex("WinnerId");

                    b.ToTable("ChallengeStatistics");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Unnicum_Server.Models.JudgementCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("JudgementCategories");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MediaType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationStatus")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AreaLevel")
                        .HasColumnType("int");

                    b.Property<bool>("CanSeeChild")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostStatus")
                        .HasColumnType("int");

                    b.Property<int>("StreamId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Unnicum_Server.Models.PostComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId")
                        .IsUnique();

                    b.HasIndex("PostId");

                    b.ToTable("PostComment");
                });

            modelBuilder.Entity("Unnicum_Server.Models.PostLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LikeId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LikeId")
                        .IsUnique();

                    b.HasIndex("PostId");

                    b.ToTable("PostLike");
                });

            modelBuilder.Entity("Unnicum_Server.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Unnicum_Server.Models.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("Unnicum_Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Birthday")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsJudge")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("SelectedUserId")
                        .HasColumnType("int");

                    b.Property<int>("VotedUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("SelectedUserId");

                    b.HasIndex("VotedUserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Unnicum_Server.Models.BlockedUser", b =>
                {
                    b.HasOne("Unnicum_Server.Models.User", "Blocked")
                        .WithMany("BlockedUserBlockeds")
                        .HasForeignKey("BlockedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.User", "WhoBlocked")
                        .WithMany("WhoBlockedBlockeds")
                        .HasForeignKey("WhoBlockedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("WhoBlocked");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Challenge", b =>
                {
                    b.HasOne("Unnicum_Server.Models.Post", "ChallengedPost")
                        .WithOne("ChallengedPostChallenge")
                        .HasForeignKey("Unnicum_Server.Models.Challenge", "ChallengedPostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.Post", "ChallengerPost")
                        .WithOne("ChallengerPostChallenge")
                        .HasForeignKey("Unnicum_Server.Models.Challenge", "ChallengerPostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChallengedPost");

                    b.Navigation("ChallengerPost");
                });

            modelBuilder.Entity("Unnicum_Server.Models.ChallengeCategory", b =>
                {
                    b.HasOne("Unnicum_Server.Models.Category", "Category")
                        .WithMany("ChallengeCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.User", "User")
                        .WithMany("ChallengeCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Unnicum_Server.Models.ChallengeComment", b =>
                {
                    b.HasOne("Unnicum_Server.Models.Challenge", "Challenge")
                        .WithMany("ChallengeComments")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.Comment", "Comment")
                        .WithOne("ChallengeComment")
                        .HasForeignKey("Unnicum_Server.Models.ChallengeComment", "CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("Unnicum_Server.Models.ChallengeLike", b =>
                {
                    b.HasOne("Unnicum_Server.Models.Challenge", "Challenge")
                        .WithMany("ChallengeLikes")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.Like", "Like")
                        .WithOne("ChallengeLike")
                        .HasForeignKey("Unnicum_Server.Models.ChallengeLike", "LikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("Like");
                });

            modelBuilder.Entity("Unnicum_Server.Models.ChallengeStatistic", b =>
                {
                    b.HasOne("Unnicum_Server.Models.Challenge", "Challenge")
                        .WithOne("ChallengeStatistic")
                        .HasForeignKey("Unnicum_Server.Models.ChallengeStatistic", "ChallengeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.User", "Loser")
                        .WithMany("LoserChallengeStatistic")
                        .HasForeignKey("LoserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.User", "Winner")
                        .WithMany("WinnerChallengeStatistic")
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("Loser");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Comment", b =>
                {
                    b.HasOne("Unnicum_Server.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Unnicum_Server.Models.JudgementCategory", b =>
                {
                    b.HasOne("Unnicum_Server.Models.Category", "Category")
                        .WithMany("JudgementCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.User", "User")
                        .WithMany("JudgementCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Like", b =>
                {
                    b.HasOne("Unnicum_Server.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Notification", b =>
                {
                    b.HasOne("Unnicum_Server.Models.Media", "Image")
                        .WithOne("Notification")
                        .HasForeignKey("Unnicum_Server.Models.Notification", "ImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Post", b =>
                {
                    b.HasOne("Unnicum_Server.Models.Address", "Address")
                        .WithMany("Posts")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.Media", "Stream")
                        .WithOne("Post")
                        .HasForeignKey("Unnicum_Server.Models.Post", "StreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.SubCategory", "SubCategory")
                        .WithMany("Posts")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Stream");

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Unnicum_Server.Models.PostComment", b =>
                {
                    b.HasOne("Unnicum_Server.Models.Comment", "Comment")
                        .WithOne("PostComment")
                        .HasForeignKey("Unnicum_Server.Models.PostComment", "CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Unnicum_Server.Models.PostLike", b =>
                {
                    b.HasOne("Unnicum_Server.Models.Like", "Like")
                        .WithOne("PostLike")
                        .HasForeignKey("Unnicum_Server.Models.PostLike", "LikeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.Post", "Post")
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Like");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Unnicum_Server.Models.RefreshToken", b =>
                {
                    b.HasOne("Unnicum_Server.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Unnicum_Server.Models.SubCategory", b =>
                {
                    b.HasOne("Unnicum_Server.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Unnicum_Server.Models.User", b =>
                {
                    b.HasOne("Unnicum_Server.Models.Address", "Address")
                        .WithOne("User")
                        .HasForeignKey("Unnicum_Server.Models.User", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.Media", "Image")
                        .WithOne("User")
                        .HasForeignKey("Unnicum_Server.Models.User", "ImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Vote", b =>
                {
                    b.HasOne("Unnicum_Server.Models.Challenge", "Challenge")
                        .WithMany("Votes")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.User", "SelectedUser")
                        .WithMany("SelectedUserVote")
                        .HasForeignKey("SelectedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unnicum_Server.Models.User", "VotedUser")
                        .WithMany("VotedUserVotes")
                        .HasForeignKey("VotedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("SelectedUser");

                    b.Navigation("VotedUser");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Address", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Category", b =>
                {
                    b.Navigation("ChallengeCategories");

                    b.Navigation("JudgementCategories");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Challenge", b =>
                {
                    b.Navigation("ChallengeComments");

                    b.Navigation("ChallengeLikes");

                    b.Navigation("ChallengeStatistic");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Comment", b =>
                {
                    b.Navigation("ChallengeComment");

                    b.Navigation("PostComment");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Like", b =>
                {
                    b.Navigation("ChallengeLike");

                    b.Navigation("PostLike");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Media", b =>
                {
                    b.Navigation("Notification");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Unnicum_Server.Models.Post", b =>
                {
                    b.Navigation("ChallengedPostChallenge");

                    b.Navigation("ChallengerPostChallenge");

                    b.Navigation("PostComments");

                    b.Navigation("PostLikes");
                });

            modelBuilder.Entity("Unnicum_Server.Models.SubCategory", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Unnicum_Server.Models.User", b =>
                {
                    b.Navigation("BlockedUserBlockeds");

                    b.Navigation("ChallengeCategories");

                    b.Navigation("Comments");

                    b.Navigation("JudgementCategories");

                    b.Navigation("Likes");

                    b.Navigation("LoserChallengeStatistic");

                    b.Navigation("Notifications");

                    b.Navigation("Posts");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SelectedUserVote");

                    b.Navigation("VotedUserVotes");

                    b.Navigation("WhoBlockedBlockeds");

                    b.Navigation("WinnerChallengeStatistic");
                });
#pragma warning restore 612, 618
        }
    }
}
